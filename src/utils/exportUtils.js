import jsPDF from 'jspdf';

export const exportUtils = {
  // Export prompt as PDF
  exportToPDF: (prompt, filename = 'prompt') => {
    try {
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(20);
      doc.setTextColor(139, 92, 246); // Purple color
      doc.text('Personal Prompt Generator', 20, 20);
      
      // Add prompt details
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Category: ${prompt.category}`, 20, 40);
      doc.text(`Tone: ${prompt.tone}`, 20, 50);
      doc.text(`Size: ${prompt.size}`, 20, 60);
      doc.text(`Created: ${new Date(prompt.timestamp).toLocaleDateString()}`, 20, 70);
      
      // Add prompt content
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.setFont(undefined, 'bold');
      doc.text('Prompt:', 20, 90);
      
      doc.setFont(undefined, 'normal');
      doc.setFontSize(12);
      
      // Split text into lines that fit the page width
      const maxWidth = 170;
      const lines = doc.splitTextToSize(prompt.content, maxWidth);
      
      let yPosition = 100;
      lines.forEach((line, index) => {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line, 20, yPosition);
        yPosition += 7;
      });
      
      // Add footer
      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      doc.text('Generated by Personal Prompt Generator', 20, 280);
      
      // Save the PDF
      doc.save(`${filename}.pdf`);
      return true;
    } catch (error) {
      console.error('Error exporting to PDF:', error);
      return false;
    }
  },

  // Copy text to clipboard
  copyToClipboard: async (text) => {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
        return true;
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        const result = document.execCommand('copy');
        textArea.remove();
        return result;
      }
    } catch (error) {
      console.error('Error copying to clipboard:', error);
      return false;
    }
  },

  // Share prompt using Web Share API
  sharePrompt: async (prompt) => {
    try {
      if (navigator.share) {
        const shareData = {
          title: 'Personal Prompt Generator',
          text: `Check out this AI prompt I created:\n\n${prompt.content}\n\nCategory: ${prompt.category}\nTone: ${prompt.tone}`,
          url: window.location.href
        };
        await navigator.share(shareData);
        return true;
      } else {
        // Fallback: copy to clipboard
        const shareText = `Check out this AI prompt I created:\n\n${prompt.content}\n\nCategory: ${prompt.category}\nTone: ${prompt.tone}\n\nGenerated with Personal Prompt Generator`;
        return await exportUtils.copyToClipboard(shareText);
      }
    } catch (error) {
      console.error('Error sharing prompt:', error);
      return false;
    }
  },

  // Export data as JSON file
  exportDataAsJSON: (data, filename = 'prompt-data') => {
    try {
      const jsonString = JSON.stringify(data, null, 2);
      const blob = new Blob([jsonString], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${filename}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      return true;
    } catch (error) {
      console.error('Error exporting data as JSON:', error);
      return false;
    }
  },

  // Import data from JSON file
  importDataFromJSON: (file) => {
    return new Promise((resolve, reject) => {
      try {
        const reader = new FileReader();
        reader.onload = (e) => {
          try {
            const data = JSON.parse(e.target.result);
            resolve(data);
          } catch (error) {
            reject(new Error('Invalid JSON file'));
          }
        };
        reader.onerror = () => reject(new Error('Error reading file'));
        reader.readAsText(file);
      } catch (error) {
        reject(error);
      }
    });
  },

  // Generate shareable link (for future implementation)
  generateShareableLink: (prompt) => {
    try {
      const baseUrl = window.location.origin + window.location.pathname;
      const params = new URLSearchParams({
        category: prompt.category,
        tone: prompt.tone,
        size: prompt.size,
        content: encodeURIComponent(prompt.content)
      });
      return `${baseUrl}?${params.toString()}`;
    } catch (error) {
      console.error('Error generating shareable link:', error);
      return null;
    }
  }
};
